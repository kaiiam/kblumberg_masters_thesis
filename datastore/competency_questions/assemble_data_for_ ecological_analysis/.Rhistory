lmdf <- plyr::ldply(lm,data.frame)
min_aic5 <- lmdf %>% filter(aic == min(aic))
if(min_aic5$aic > min_aic4$aic){
reg <- ergm(net ~ edges +
absdiff(paste("f",min_aic1$factor,sep="")) +
absdiff(paste("f",min_aic2$factors,sep="")) +
absdiff(paste("f",min_aic3$factors,sep="")) +
absdiff(paste("f",min_aic4$factors,sep="")))
}else{
reg <- ergm(net ~ edges + absdiff(paste("f",min_aic1$factor,sep="")) +
absdiff(paste("f",min_aic2$factors,sep="")) +
absdiff(paste("f",min_aic3$factors,sep="")) +
absdiff(paste("f",min_aic4$factors,sep="")) +
absdiff(paste("f",min_aic5$factors,sep="")))
}}}}
sim_ergm  <- data.frame(summary(reg)$coefs)
sim_ergm$Terms <- rownames(sim_ergm)
#sim_ergm$Clstr <- clstr
sim_ergm$Density <- density
} else {
sim_ergm <- data_frame(Estimate = Inf, Std..Error = Inf,  MCMC..= Inf, p.value= Inf, Terms="any", Density=density)
}
return(sim_ergm)
}
test_bad <- lapply(1:5,ergm_bad)
bad_cluster_generator <- function(x){
num <- x
bad_clustering_list <- fasta_dataframe %>% filter(seq_id %in% sample(fasta_dataframe$seq_id, 25)) %>% mutate(iter = num)
}
bad_clustering_list <- bind_rows(lapply(1:100, bad_cluster_generator)) %>% tbl_df
ergm_bad <- function(iteration) {
#bad_cluster_iterator <- function(iteration){
i <- as.integer(iteration)
# i=1
#bad_clustering_list <- bad_list
cluster_table <- bad_clustering_list %>% filter(iter == i) %>% dplyr::select(seq_id, seq)
cluster_seq_vector <- as.vector(as.character(cluster_table$seq))
names(cluster_seq_vector) <- cluster_table$seq_id
network_links <- bad_clustering_list %>% filter(iter == i) %>% dplyr::select(seq_id)
graph <- graph.full(25)
V(graph)$name <- network_links
E(graph)$weight <- runif(25,min=0,max=1)
#plot(graph, vertex.label=NA)
#filtering
weights <- unique(sort(E(graph)$weight, decreasing = FALSE))
graph <- binary_search_filter_1(g = graph, low = 1, high = length(weights))$graph
### retrieve AA descriptors for the nodes(proteins)
#seqs length as attribute
l <- plyr::ldply(cluster_seq_vector, function(x){length(unlist(strsplit(x, "")))})
graph <- igraph::set.vertex.attribute(graph = graph, name = "length", index=V(graph), value = l$V1)
#hist(V(graph)$length)
#AA descriptors
f1 <- unlist(lapply(HDMD::FactorTransform(cluster_seq_vector, Factor = 1), sum))/l$V1
f2 <- unlist(lapply(HDMD::FactorTransform(cluster_seq_vector, Factor = 2), sum))/l$V1
f3 <- unlist(lapply(HDMD::FactorTransform(cluster_seq_vector, Factor = 3), sum))/l$V1
f4 <- unlist(lapply(HDMD::FactorTransform(cluster_seq_vector, Factor = 4), sum))/l$V1
f5 <- unlist(lapply(HDMD::FactorTransform(cluster_seq_vector, Factor = 5), sum))/l$V1
all_FA_sum <- data_frame(f1, f2, f3, f4, f5) %>% rowSums()
graph <- igraph::set.vertex.attribute(graph = graph, name = "allFA", index=V(graph), value = all_FA_sum)
graph <- igraph::set.vertex.attribute(graph = graph, name = "f1", index=V(graph), value = f1)
graph <- igraph::set.vertex.attribute(graph = graph, name = "f2", index=V(graph), value = f2)
graph <- igraph::set.vertex.attribute(graph = graph, name = "f3", index=V(graph), value = f3)
graph <- igraph::set.vertex.attribute(graph = graph, name = "f4", index=V(graph), value = f4)
graph <- igraph::set.vertex.attribute(graph = graph, name = "f5", index=V(graph), value = f5)
density <- graph.density(graph)
net <- asNetwork(graph)
# We test that the edges are different enough to model homophily, if not we will get Inf
reg_edges <- ergm(net ~ edges)
if (!is.infinite(reg_edges$coef)){
factors <- 1:5
steps <- function(i) {
regi <- ergm(net ~ edges + absdiff(paste("f",i,sep="")))
aic <- regi$glm$aic
df <- data.frame(aic=aic, factors=i)
}
lm <- lapply(factors, steps)
lmdf <- plyr::ldply(lm,data.frame)
min_aic1 <- lmdf %>% filter(aic == min(aic))
factors <- factors[! factors %in% min_aic1$factor ]
steps1 <- function(i){
regi <- ergm(net ~ edges + absdiff(paste("f",min_aic1$factor,sep="")) + absdiff(paste("f",i,sep="")))
aic <- regi$glm$aic
df <- data.frame(aic=aic, factors=i)
}
lm <- lapply(factors, steps1)
lmdf <- plyr::ldply(lm,data.frame)
min_aic2 <- lmdf %>% filter(aic == min(aic))
if(min_aic2$aic > min_aic1$aic){
#return model
reg <- ergm(net ~ edges + absdiff(paste("f",min_aic1$factor,sep="")))
}else{
factors <- factors[! factors %in% min_aic2$factor ]
steps2 <- function(i){
regi <- ergm(net ~ edges + absdiff(paste("f",min_aic1$factor,sep="")) + absdiff(paste("f",min_aic2$factors,sep="")) + absdiff(paste("f",i,sep="")))
aic <- regi$glm$aic
df <- data.frame(aic=aic, factors=i)
}
lm <- lapply(factors, steps2)
lmdf <- plyr::ldply(lm,data.frame)
min_aic3 <- lmdf %>% filter(aic == min(aic))
if(min_aic3$aic > min_aic2$aic){
#return model
reg <- ergm(net ~ edges + absdiff(paste("f",min_aic1$factor,sep="")) +
absdiff(paste("f",min_aic2$factors,sep="")))
}else{
factors <- factors[! factors %in% min_aic3$factor ]
steps3 <- function(i){
regi <- ergm(net ~ edges + absdiff(paste("f",min_aic1$factor,sep="")) +
absdiff(paste("f",min_aic2$factors,sep="")) +
absdiff(paste("f",min_aic3$factors,sep="")) + absdiff(paste("f",i,sep="")))
aic <- regi$glm$aic
df <- data.frame(aic=aic, factors=i)
}
lm <- lapply(factors, steps3)
lmdf <- plyr::ldply(lm,data.frame)
min_aic4 <- lmdf %>% filter(aic == min(aic))
if(min_aic4$aic > min_aic3$aic){
reg <- ergm(net ~ edges + absdiff(paste("f",min_aic1$factor,sep="")) +
absdiff(paste("f",min_aic2$factors,sep="")) +
absdiff(paste("f",min_aic3$factors,sep="")))
}else{
factors <- factors[! factors %in% min_aic4$factor ]
steps4 <- function(i){
regi <- ergm(net ~ edges + absdiff(paste("f",min_aic1$factor,sep="")) +
absdiff(paste("f",min_aic2$factors,sep="")) +
absdiff(paste("f",min_aic3$factors,sep="")) +
absdiff(paste("f",min_aic4$factors,sep="")) +
absdiff(paste("f",i,sep="")))
aic <- regi$glm$aic
df <- data.frame(aic=aic, factors=i)
}
lm <- lapply(factors, steps4)
lmdf <- plyr::ldply(lm,data.frame)
min_aic5 <- lmdf %>% filter(aic == min(aic))
if(min_aic5$aic > min_aic4$aic){
reg <- ergm(net ~ edges +
absdiff(paste("f",min_aic1$factor,sep="")) +
absdiff(paste("f",min_aic2$factors,sep="")) +
absdiff(paste("f",min_aic3$factors,sep="")) +
absdiff(paste("f",min_aic4$factors,sep="")))
}else{
reg <- ergm(net ~ edges + absdiff(paste("f",min_aic1$factor,sep="")) +
absdiff(paste("f",min_aic2$factors,sep="")) +
absdiff(paste("f",min_aic3$factors,sep="")) +
absdiff(paste("f",min_aic4$factors,sep="")) +
absdiff(paste("f",min_aic5$factors,sep="")))
}}}}
sim_ergm  <- data.frame(summary(reg)$coefs)
sim_ergm$Terms <- rownames(sim_ergm)
#sim_ergm$Clstr <- clstr
sim_ergm$Density <- density
} else {
sim_ergm <- data_frame(Estimate = Inf, Std..Error = Inf,  MCMC..= Inf, p.value= Inf, Terms="any", Density=density)
}
return(sim_ergm)
}
test_bad <- lapply(1:5,ergm_bad)
test <- plyr::ldply(test_bad, data.frame)
test_bad <- lapply(1:5,ergm_bad)
test <- plyr::ldply(test_bad, data.frame)
bad_cluster_generator <- function(x){
num <- x
bad_clustering_list <- fasta_dataframe %>% filter(seq_id %in% sample(fasta_dataframe$seq_id, 25)) %>% mutate(iter = num)
}
bad_clustering_list <- bind_rows(lapply(1:100, bad_cluster_generator)) %>% tbl_df
ergm_bad <- function(iteration) {
#bad_cluster_iterator <- function(iteration){
i <- as.integer(iteration)
# i=1
#bad_clustering_list <- bad_list
cluster_table <- bad_clustering_list %>% filter(iter == i) %>% dplyr::select(seq_id, seq)
cluster_seq_vector <- as.vector(as.character(cluster_table$seq))
names(cluster_seq_vector) <- cluster_table$seq_id
network_links <- bad_clustering_list %>% filter(iter == i) %>% dplyr::select(seq_id)
graph <- graph.full(25)
V(graph)$name <- network_links
E(graph)$weight <- runif(25,min=0,max=1)
#plot(graph, vertex.label=NA)
#filtering
weights <- unique(sort(E(graph)$weight, decreasing = FALSE))
graph <- binary_search_filter_1(g = graph, low = 1, high = length(weights))$graph
### retrieve AA descriptors for the nodes(proteins)
#seqs length as attribute
l <- plyr::ldply(cluster_seq_vector, function(x){length(unlist(strsplit(x, "")))})
graph <- igraph::set.vertex.attribute(graph = graph, name = "length", index=V(graph), value = l$V1)
#hist(V(graph)$length)
#AA descriptors
f1 <- unlist(lapply(HDMD::FactorTransform(cluster_seq_vector, Factor = 1), sum))/l$V1
f2 <- unlist(lapply(HDMD::FactorTransform(cluster_seq_vector, Factor = 2), sum))/l$V1
f3 <- unlist(lapply(HDMD::FactorTransform(cluster_seq_vector, Factor = 3), sum))/l$V1
f4 <- unlist(lapply(HDMD::FactorTransform(cluster_seq_vector, Factor = 4), sum))/l$V1
f5 <- unlist(lapply(HDMD::FactorTransform(cluster_seq_vector, Factor = 5), sum))/l$V1
all_FA_sum <- data_frame(f1, f2, f3, f4, f5) %>% rowSums()
graph <- igraph::set.vertex.attribute(graph = graph, name = "allFA", index=V(graph), value = all_FA_sum)
graph <- igraph::set.vertex.attribute(graph = graph, name = "f1", index=V(graph), value = f1)
graph <- igraph::set.vertex.attribute(graph = graph, name = "f2", index=V(graph), value = f2)
graph <- igraph::set.vertex.attribute(graph = graph, name = "f3", index=V(graph), value = f3)
graph <- igraph::set.vertex.attribute(graph = graph, name = "f4", index=V(graph), value = f4)
graph <- igraph::set.vertex.attribute(graph = graph, name = "f5", index=V(graph), value = f5)
density <- graph.density(graph)
net <- asNetwork(graph)
# We test that the edges are different enough to model homophily, if not we will get Inf
reg_edges <- ergm(net ~ edges)
if (!is.infinite(reg_edges$coef)){
factors <- 1:5
steps <- function(i) {
regi <- ergm(net ~ edges + absdiff(paste("f",i,sep="")))
aic <- regi$glm$aic
df <- data.frame(aic=aic, factors=i)
}
lm <- lapply(factors, steps)
lmdf <- plyr::ldply(lm,data.frame)
min_aic1 <- lmdf %>% filter(aic == min(aic))
factors <- factors[! factors %in% min_aic1$factor ]
steps1 <- function(i){
regi <- ergm(net ~ edges + absdiff(paste("f",min_aic1$factor,sep="")) + absdiff(paste("f",i,sep="")))
aic <- regi$glm$aic
df <- data.frame(aic=aic, factors=i)
}
lm <- lapply(factors, steps1)
lmdf <- plyr::ldply(lm,data.frame)
min_aic2 <- lmdf %>% filter(aic == min(aic))
if(min_aic2$aic > min_aic1$aic){
#return model
reg <- ergm(net ~ edges + absdiff(paste("f",min_aic1$factor,sep="")))
}else{
factors <- factors[! factors %in% min_aic2$factor ]
steps2 <- function(i){
regi <- ergm(net ~ edges + absdiff(paste("f",min_aic1$factor,sep="")) + absdiff(paste("f",min_aic2$factors,sep="")) + absdiff(paste("f",i,sep="")))
aic <- regi$glm$aic
df <- data.frame(aic=aic, factors=i)
}
lm <- lapply(factors, steps2)
lmdf <- plyr::ldply(lm,data.frame)
min_aic3 <- lmdf %>% filter(aic == min(aic))
if(min_aic3$aic > min_aic2$aic){
#return model
reg <- ergm(net ~ edges + absdiff(paste("f",min_aic1$factor,sep="")) +
absdiff(paste("f",min_aic2$factors,sep="")))
}else{
factors <- factors[! factors %in% min_aic3$factor ]
steps3 <- function(i){
regi <- ergm(net ~ edges + absdiff(paste("f",min_aic1$factor,sep="")) +
absdiff(paste("f",min_aic2$factors,sep="")) +
absdiff(paste("f",min_aic3$factors,sep="")) + absdiff(paste("f",i,sep="")))
aic <- regi$glm$aic
df <- data.frame(aic=aic, factors=i)
}
lm <- lapply(factors, steps3)
lmdf <- plyr::ldply(lm,data.frame)
min_aic4 <- lmdf %>% filter(aic == min(aic))
if(min_aic4$aic > min_aic3$aic){
reg <- ergm(net ~ edges + absdiff(paste("f",min_aic1$factor,sep="")) +
absdiff(paste("f",min_aic2$factors,sep="")) +
absdiff(paste("f",min_aic3$factors,sep="")))
}else{
factors <- factors[! factors %in% min_aic4$factor ]
steps4 <- function(i){
regi <- ergm(net ~ edges + absdiff(paste("f",min_aic1$factor,sep="")) +
absdiff(paste("f",min_aic2$factors,sep="")) +
absdiff(paste("f",min_aic3$factors,sep="")) +
absdiff(paste("f",min_aic4$factors,sep="")) +
absdiff(paste("f",i,sep="")))
aic <- regi$glm$aic
df <- data.frame(aic=aic, factors=i)
}
lm <- lapply(factors, steps4)
lmdf <- plyr::ldply(lm,data.frame)
min_aic5 <- lmdf %>% filter(aic == min(aic))
if(min_aic5$aic > min_aic4$aic){
reg <- ergm(net ~ edges +
absdiff(paste("f",min_aic1$factor,sep="")) +
absdiff(paste("f",min_aic2$factors,sep="")) +
absdiff(paste("f",min_aic3$factors,sep="")) +
absdiff(paste("f",min_aic4$factors,sep="")))
}else{
reg <- ergm(net ~ edges + absdiff(paste("f",min_aic1$factor,sep="")) +
absdiff(paste("f",min_aic2$factors,sep="")) +
absdiff(paste("f",min_aic3$factors,sep="")) +
absdiff(paste("f",min_aic4$factors,sep="")) +
absdiff(paste("f",min_aic5$factors,sep="")))
}}}}
sim_ergm  <- data.frame(summary(reg)$coefs)
sim_ergm$Terms <- rownames(sim_ergm)
#sim_ergm$Clstr <- clstr
sim_ergm$Density <- density
} else {
sim_ergm <- data_frame(Estimate = Inf, Std..Error = Inf,  MCMC..= Inf, p.value= Inf, Terms="any", Density=density)
}
return(sim_ergm)
}
test_bad <- lapply(1:5,ergm_bad)
i <- as.integer(iteration)
i=1
cluster_table <- bad_clustering_list %>% filter(iter == i) %>% dplyr::select(seq_id, seq)
cluster_seq_vector <- as.vector(as.character(cluster_table$seq))
names(cluster_seq_vector) <- cluster_table$seq_id
network_links <- bad_clustering_list %>% filter(iter == i) %>% dplyr::select(seq_id)
graph <- graph.full(25)
V(graph)$name <- network_links
E(graph)$weight <- runif(25,min=0,max=1)
weights <- unique(sort(E(graph)$weight, decreasing = FALSE))
graph <- binary_search_filter_1(g = graph, low = 1, high = length(weights))$graph
l <- plyr::ldply(cluster_seq_vector, function(x){length(unlist(strsplit(x, "")))})
graph <- igraph::set.vertex.attribute(graph = graph, name = "length", index=V(graph), value = l$V1)
f1 <- unlist(lapply(HDMD::FactorTransform(cluster_seq_vector, Factor = 1), sum))/l$V1
f2 <- unlist(lapply(HDMD::FactorTransform(cluster_seq_vector, Factor = 2), sum))/l$V1
f3 <- unlist(lapply(HDMD::FactorTransform(cluster_seq_vector, Factor = 3), sum))/l$V1
f4 <- unlist(lapply(HDMD::FactorTransform(cluster_seq_vector, Factor = 4), sum))/l$V1
f5 <- unlist(lapply(HDMD::FactorTransform(cluster_seq_vector, Factor = 5), sum))/l$V1
all_FA_sum <- data_frame(f1, f2, f3, f4, f5) %>% rowSums()
graph <- igraph::set.vertex.attribute(graph = graph, name = "allFA", index=V(graph), value = all_FA_sum)
graph <- igraph::set.vertex.attribute(graph = graph, name = "f1", index=V(graph), value = f1)
graph <- igraph::set.vertex.attribute(graph = graph, name = "f2", index=V(graph), value = f2)
graph <- igraph::set.vertex.attribute(graph = graph, name = "f3", index=V(graph), value = f3)
graph <- igraph::set.vertex.attribute(graph = graph, name = "f4", index=V(graph), value = f4)
graph <- igraph::set.vertex.attribute(graph = graph, name = "f5", index=V(graph), value = f5)
density <- graph.density(graph)
net <- asNetwork(graph)
reg_edges <- ergm(net ~ edges)
!is.infinite(reg_edges$coef
(!is.infinite(reg_edges$coef))
factors <- 1:5
steps <- function(i) {
regi <- ergm(net ~ edges + absdiff(paste("f",i,sep="")))
aic <- regi$glm$aic
df <- data.frame(aic=aic, factors=i)
}
lm <- lapply(factors, steps)
lmdf <- plyr::ldply(lm,data.frame)
min_aic1 <- lmdf %>% filter(aic == min(aic))
factors <- factors[! factors %in% min_aic1$factor ]
steps1 <- function(i){
regi <- ergm(net ~ edges + absdiff(paste("f",min_aic1$factor,sep="")) + absdiff(paste("f",i,sep="")))
aic <- regi$glm$aic
df <- data.frame(aic=aic, factors=i)
}
lm <- lapply(factors, steps1)
lmdf <- plyr::ldply(lm,data.frame)
min_aic2 <- lmdf %>% filter(aic == min(aic))
min_aic2$aic > min_aic1$aic
reg <- ergm(net ~ edges + absdiff(paste("f",min_aic1$factor,sep="")))
sim_ergm  <- data.frame(summary(reg)$coefs)
sim_ergm$Terms <- rownames(sim_ergm)
sim_ergm$Density <- density
ergm_bad <- function(iteration) {
#bad_cluster_iterator <- function(iteration){
i <- as.integer(iteration)
#i=1
#bad_clustering_list <- bad_list
cluster_table <- bad_clustering_list %>% filter(iter == i) %>% dplyr::select(seq_id, seq)
cluster_seq_vector <- as.vector(as.character(cluster_table$seq))
names(cluster_seq_vector) <- cluster_table$seq_id
network_links <- bad_clustering_list %>% filter(iter == i) %>% dplyr::select(seq_id)
graph <- graph.full(25)
V(graph)$name <- network_links
E(graph)$weight <- runif(25,min=0,max=1)
#plot(graph, vertex.label=NA)
#filtering
weights <- unique(sort(E(graph)$weight, decreasing = FALSE))
graph <- binary_search_filter_1(g = graph, low = 1, high = length(weights))$graph
### retrieve AA descriptors for the nodes(proteins)
#seqs length as attribute
l <- plyr::ldply(cluster_seq_vector, function(x){length(unlist(strsplit(x, "")))})
graph <- igraph::set.vertex.attribute(graph = graph, name = "length", index=V(graph), value = l$V1)
#hist(V(graph)$length)
#AA descriptors
f1 <- unlist(lapply(HDMD::FactorTransform(cluster_seq_vector, Factor = 1), sum))/l$V1
f2 <- unlist(lapply(HDMD::FactorTransform(cluster_seq_vector, Factor = 2), sum))/l$V1
f3 <- unlist(lapply(HDMD::FactorTransform(cluster_seq_vector, Factor = 3), sum))/l$V1
f4 <- unlist(lapply(HDMD::FactorTransform(cluster_seq_vector, Factor = 4), sum))/l$V1
f5 <- unlist(lapply(HDMD::FactorTransform(cluster_seq_vector, Factor = 5), sum))/l$V1
all_FA_sum <- data_frame(f1, f2, f3, f4, f5) %>% rowSums()
graph <- igraph::set.vertex.attribute(graph = graph, name = "allFA", index=V(graph), value = all_FA_sum)
graph <- igraph::set.vertex.attribute(graph = graph, name = "f1", index=V(graph), value = f1)
graph <- igraph::set.vertex.attribute(graph = graph, name = "f2", index=V(graph), value = f2)
graph <- igraph::set.vertex.attribute(graph = graph, name = "f3", index=V(graph), value = f3)
graph <- igraph::set.vertex.attribute(graph = graph, name = "f4", index=V(graph), value = f4)
graph <- igraph::set.vertex.attribute(graph = graph, name = "f5", index=V(graph), value = f5)
density <- graph.density(graph)
net <- asNetwork(graph)
# We test that the edges are different enough to model homophily, if not we will get Inf
reg_edges <- ergm(net ~ edges)
if (!is.infinite(reg_edges$coef)){
factors <- 1:5
steps <- function(i) {
regi <- ergm(net ~ edges + absdiff(paste("f",i,sep="")))
aic <- regi$glm$aic
df <- data.frame(aic=aic, factors=i)
}
lm <- lapply(factors, steps)
lmdf <- plyr::ldply(lm,data.frame)
min_aic1 <- lmdf %>% filter(aic == min(aic))
factors <- factors[! factors %in% min_aic1$factor ]
steps1 <- function(i){
regi <- ergm(net ~ edges + absdiff(paste("f",min_aic1$factor,sep="")) + absdiff(paste("f",i,sep="")))
aic <- regi$glm$aic
df <- data.frame(aic=aic, factors=i)
}
lm <- lapply(factors, steps1)
lmdf <- plyr::ldply(lm,data.frame)
min_aic2 <- lmdf %>% filter(aic == min(aic))
if(min_aic2$aic > min_aic1$aic){
#return model
reg <- ergm(net ~ edges + absdiff(paste("f",min_aic1$factor,sep="")))
}else{
factors <- factors[! factors %in% min_aic2$factor ]
steps2 <- function(i){
regi <- ergm(net ~ edges + absdiff(paste("f",min_aic1$factor,sep="")) + absdiff(paste("f",min_aic2$factors,sep="")) + absdiff(paste("f",i,sep="")))
aic <- regi$glm$aic
df <- data.frame(aic=aic, factors=i)
}
lm <- lapply(factors, steps2)
lmdf <- plyr::ldply(lm,data.frame)
min_aic3 <- lmdf %>% filter(aic == min(aic))
if(min_aic3$aic > min_aic2$aic){
#return model
reg <- ergm(net ~ edges + absdiff(paste("f",min_aic1$factor,sep="")) +
absdiff(paste("f",min_aic2$factors,sep="")))
}else{
factors <- factors[! factors %in% min_aic3$factor ]
steps3 <- function(i){
regi <- ergm(net ~ edges + absdiff(paste("f",min_aic1$factor,sep="")) +
absdiff(paste("f",min_aic2$factors,sep="")) +
absdiff(paste("f",min_aic3$factors,sep="")) + absdiff(paste("f",i,sep="")))
aic <- regi$glm$aic
df <- data.frame(aic=aic, factors=i)
}
lm <- lapply(factors, steps3)
lmdf <- plyr::ldply(lm,data.frame)
min_aic4 <- lmdf %>% filter(aic == min(aic))
if(min_aic4$aic > min_aic3$aic){
reg <- ergm(net ~ edges + absdiff(paste("f",min_aic1$factor,sep="")) +
absdiff(paste("f",min_aic2$factors,sep="")) +
absdiff(paste("f",min_aic3$factors,sep="")))
}else{
factors <- factors[! factors %in% min_aic4$factor ]
steps4 <- function(i){
regi <- ergm(net ~ edges + absdiff(paste("f",min_aic1$factor,sep="")) +
absdiff(paste("f",min_aic2$factors,sep="")) +
absdiff(paste("f",min_aic3$factors,sep="")) +
absdiff(paste("f",min_aic4$factors,sep="")) +
absdiff(paste("f",i,sep="")))
aic <- regi$glm$aic
df <- data.frame(aic=aic, factors=i)
}
lm <- lapply(factors, steps4)
lmdf <- plyr::ldply(lm,data.frame)
min_aic5 <- lmdf %>% filter(aic == min(aic))
if(min_aic5$aic > min_aic4$aic){
reg <- ergm(net ~ edges +
absdiff(paste("f",min_aic1$factor,sep="")) +
absdiff(paste("f",min_aic2$factors,sep="")) +
absdiff(paste("f",min_aic3$factors,sep="")) +
absdiff(paste("f",min_aic4$factors,sep="")))
}else{
reg <- ergm(net ~ edges + absdiff(paste("f",min_aic1$factor,sep="")) +
absdiff(paste("f",min_aic2$factors,sep="")) +
absdiff(paste("f",min_aic3$factors,sep="")) +
absdiff(paste("f",min_aic4$factors,sep="")) +
absdiff(paste("f",min_aic5$factors,sep="")))
}}}}
sim_ergm  <- data.frame(summary(reg)$coefs)
sim_ergm$Terms <- rownames(sim_ergm)
#sim_ergm$Clstr <- clstr
sim_ergm$Density <- density
} else {
sim_ergm <- data_frame(Estimate = Inf, Std..Error = Inf,  MCMC..= Inf, p.value= Inf, Terms="any", Density=density)
}
return(sim_ergm)
}
test_bad <- lapply(1:5,ergm_bad)
test <- plyr::ldply(test_bad, data.frame)
p <- test %>% filter(Terms != "any") %>% dplyr::select(Estimate,Terms, p.value)
p$sign <- ifelse(p$p.value < 0.001, "sig", "no-sig")
ggplot(p, aes(Terms, Estimate)) +
geom_jitter(size = 1, alpha = 0.6, aes(color = sign)) +
geom_violin(alpha = 0, color = "red") +
theme_bw()
test_bad <- lapply(1:100,ergm_bad)
test_bad <- lapply(61:80,ergm_bad)
test_bad <- lapply(81:100,ergm_bad)
library(vegan)
my.rda <- rda(iris[,-5])
biplot(my.rda)
iris
vegan
?vegan
??vegan
library(vegan)
library(vegan)
library(ggplot2)
library(dplyr)
library(tidyr)
require(stats)
setwd("/home/kai/Desktop/grad_school/marmic/master_thesis/kblumberg_masters_thesis/datastore/competency_questions/assemble_data_for_ ecological_analysis")
p_data <- read.csv(file = "PCA_output_data_raw.csv",header = FALSE)
tp_data <- as.data.frame(t(p_data))
pca_data <- tp_data[2:23,]
colnames(pca_data) <- as.character(unlist(tp_data[1,]))
columns_string <- "influence_snow_depth.csvSignalStrength|inorganic_nutrients.csvNitrate|physical_oceanography.csvOxygen|inorganic_nutrients.csvPhosphate|physical_oceanography.csvSalinity|ice_algal_chlorophyll_myi.csvIceOrSnowTemperature|influence_snow_depth.csvSeaIceThickness"
c <- grep(columns_string, colnames(pca_data))
data <- cbind(pca_data[c])
colnames(data) <- gsub("^.*csv","", colnames(data))
colnames(data) <- gsub("http...purl.obolibrary.org.obo.","_", colnames(data))
indx <- sapply(data, is.factor)
data[indx] <- lapply(data[indx], function(x) as.numeric(as.character(x)))
indx <- sapply(data, is.numeric)
data.zscored <- as.data.frame(lapply(data[,indx], function(x) scale(x, center = TRUE, scale = TRUE)))
my.rda <- rda(data.zscored)
pca_plot <- biplot(my.rda, display = c("sites", "species"), type = c("text", "points"))
(my.rda$CA$eig/(sum(my.rda$CA$eig))*100)
